1.ELF
        Executable and Linkable Format.
        defines the structure for binaries, libaries, and core files.(core dump).
        The ELF's specification of OS allows the operating to interpreter its underlying machine instructions correctly.
        are typically the out put of a compiler or linker and are a binary format.
        It can be analyzed by binutils.
1.1
        benefit
        learning anything would be benifit....
1.2
        information:
        `readefl -a <a excable program>`
        1.Magic Number + class
        2. Data + Version
        3. OS/ABI + Version
        4. Type:[CORE/DYN/EXEC/REL/]
           CORE (value 4)
           DYN (Shared object file), for libraries (value 3)
           EXEC (Executable file), for binaries (value 2)
           REL (Relocatable file), before linked into an executable file (value 1)
        5. Machine + Version
        6. Entry point address.
        7. Strat of / Size of / Number of program headers
        8. start of / Size of / Number of section headers
        9. Flags
        10. Size of this headers.
2. Besides the ELF header.
   Part1. Program Headers or Segments
          zero or more segments conclued.
          desrcibe how to create a process/memory image for runtime execution.
          When kernel sees these segments, it uses them to map them into memory, using the mmap(2) system call. It's means it coverts predefined instructions into a memory image. If your ELF file is normal binary, it requires these program header, Otherwise, it simply won't run. It uses these headers, with the underlying data structure, to form a process. This process is similar for shared libraries.
   Part2. Section Headers or Sections
   Part3. Data
   --->
   Two complementary 'views'
       ㈠ Used for the linker to allow excution(segments).
       ㈡ Used for categorizing instructions and data (sections)
       
